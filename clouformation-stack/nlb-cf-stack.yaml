AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC with public/private subnets, NAT gateways, Auto Scaling Group, and NLB with all specified ports'

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    Default: aws-ec2-servers
  AMIId:
    Description: AMI ID for the EC2 instances
    Type: String
    Default: ami-01816d07b1128cd2d
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.medium
  MinSize:
    Description: Minimum number of EC2 instances
    Type: Number
    Default: 2
  MaxSize:
    Description: Maximum number of EC2 instances
    Type: Number
    Default: 6
  DesiredCapacity:
    Description: Initial number of EC2 instances
    Type: Number
    Default: 3

Resources:
  # VPC with DNS support explicitly enabled
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: development-vpc

  # DHCP Options for DNS
  VPCDHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Join ["", [!Ref "AWS::Region", ".compute.internal"]]
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: development-dhcp-options

  VPCDnsHostnames:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref VPCDHCPOptions

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/20
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: development-subnet-public1-us-east-1a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.16.0/20
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: development-subnet-public2-us-east-1b

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.32.0/20
      AvailabilityZone: !Select [2, !GetAZs '']
      Tags:
        - Key: Name
          Value: development-subnet-public3-us-east-1c

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.128.0/20
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: development-subnet-private1-us-east-1a

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.144.0/20
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: development-subnet-private2-us-east-1b

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.160.0/20
      AvailabilityZone: !Select [2, !GetAZs '']
      Tags:
        - Key: Name
          Value: development-subnet-private3-us-east-1c

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: development-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Elastic IPs for NAT Gateways
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: development-eip-us-east-1a

  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: development-eip-us-east-1b

  EIP3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: development-eip-us-east-1c

  # NAT Gateways
  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: development-nat-public1-us-east-1a
    DependsOn: VPCGatewayAttachment

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: development-nat-public2-us-east-1b
    DependsOn: VPCGatewayAttachment

  NATGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP3.AllocationId
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: development-nat-public3-us-east-1c
    DependsOn: VPCGatewayAttachment

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: development-rtb-public

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  # Private Route Tables
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: development-rtb-private1-us-east-1a

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: development-rtb-private2-us-east-1b

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: development-rtb-private3-us-east-1c

  PrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway3

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable3

  # VPC Endpoint for S3
  VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
        - !Ref PrivateRouteTable3
      Tags:
        - Key: Name
          Value: development-vpce-s3

  # Security Groups
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4200
          ToPort: 4200
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3605
          ToPort: 3605
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3606
          ToPort: 3606
          CidrIp: 0.0.0.0/0

  NLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for NLB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4200
          ToPort: 4200
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3605
          ToPort: 3605
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3606
          ToPort: 3606
          CidrIp: 0.0.0.0/0

  # Launch Template for Auto Scaling
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: movie-app-launch-template
      LaunchTemplateData:
        ImageId: !Ref AMIId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref EC2SecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
              VolumeType: gp3
              DeleteOnTermination: true
          - DeviceName: /dev/sdf
            Ebs:
              VolumeSize: 100
              VolumeType: gp3
              DeleteOnTermination: false
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: movie-app-instance
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            # Update system and install dependencies
            yum update -y
            yum install -y git docker

            # Install Docker Compose
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

            # Install JDK 11
            mkdir -p /usr/local/jvm
            curl -L https://builds.openlogic.com/downloadJDK/openlogic-openjdk/11.0.25+9/openlogic-openjdk-11.0.25+9-linux-x64.tar.gz -o /tmp/JDK_11.tar.gz
            tar -xzf /tmp/JDK_11.tar.gz -C /usr/local/jvm/
            mv /usr/local/jvm/openlogic-openjdk-11.0.25+9-linux-x64 /usr/local/jvm/jdk-11.0.25+9
            ln -s /usr/local/jvm/jdk-11.0.25+9 /usr/local/jvm/jdk-11.0.1
            rm -f /tmp/JDK_11.tar.gz

            # Install Maven
            MAVEN_VER="3.6.3"
            curl -fsSL -o /tmp/apache-maven.tar.gz "https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.6.3/apache-maven-3.6.3-bin.tar.gz"
            tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/
            mv /usr/share/apache-maven-3.6.3 /usr/share/maven
            ln -s /usr/share/maven/bin/mvn /usr/bin/mvn
            rm -f /tmp/apache-maven.tar.gz

            # Configure environment
            {
              echo "export MAVEN_HOME=/usr/share/maven"
              echo "export PATH=\$MAVEN_HOME/bin:\$PATH"
              echo "export JAVA_HOME=/usr/local/jvm/jdk-11.0.1"
              echo "export PATH=\$JAVA_HOME/bin:\$PATH"
            } >> /etc/profile
            source /etc/profile

            # Start Docker
            service docker start
            usermod -a -G docker ec2-user
            systemctl enable docker

            # Clone and build (as ec2-user)
            sudo -i -u ec2-user bash << 'EOF'
            git clone https://github.com/adnanrahin/Movie-Application.git /home/ec2-user/Movie-Application
            cd /home/ec2-user/Movie-Application
            git checkout integrate_nlb
            mvn clean install -DskipTests
            docker-compose up -d
            EOF

            # Verify installations
            {
              echo "Java version:"
              java -version 2>&1
              echo "Maven version:"
              mvn -v
              echo "Docker version:"
              docker --version
              echo "Docker Compose version:"
              docker-compose --version
            } >> /var/log/setup.log 2>&1

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: movie-app-asg
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      TargetGroupARNs:
        - !Ref Ec2TG80
        - !Ref Ec2TG8080
        - !Ref Ec2TG4200
        - !Ref Ec2TG3605
        - !Ref Ec2TG3606
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: movie-app-instance
          PropagateAtLaunch: true

  # Target Groups (now without explicit instance targets)
  Ec2TG80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub Ec2TG-80
      Port: 80
      Protocol: TCP
      VpcId: !Ref VPC
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance

  Ec2TG8080:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub Ec2TG-8080
      Port: 8080
      Protocol: TCP
      VpcId: !Ref VPC
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance

  Ec2TG4200:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub Ec2TG-4200
      Port: 4200
      Protocol: TCP
      VpcId: !Ref VPC
      HealthCheckPort: 4200
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance

  Ec2TG3605:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub Ec2TG-3605
      Port: 3605
      Protocol: TCP
      VpcId: !Ref VPC
      HealthCheckPort: 3605
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance

  Ec2TG3606:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub Ec2TG-3606
      Port: 3606
      Protocol: TCP
      VpcId: !Ref VPC
      HealthCheckPort: 3606
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance

  # Network Load Balancer
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ec2-network-load-balancer
      Type: network
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: ec2-nlb

  # NLB Listeners for all specified ports
  NLBListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref Ec2TG80

  NLBListener8080:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 8080
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref Ec2TG8080

  NLBListener4200:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 4200
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref Ec2TG4200

  NLBListener3605:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 3605
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref Ec2TG3605

  NLBListener3606:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 3606
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref Ec2TG3606

  # Auto Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 1

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1

Outputs:
  VPCId:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"

  PublicSubnet1Id:
    Description: The ID of the first public subnet
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1Id"

  PublicSubnet2Id:
    Description: The ID of the second public subnet
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2Id"

  PublicSubnet3Id:
    Description: The ID of the third public subnet
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet3Id"

  PrivateSubnet1Id:
    Description: The ID of the first private subnet
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1Id"

  PrivateSubnet2Id:
    Description: The ID of the second private subnet
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2Id"

  PrivateSubnet3Id:
    Description: The ID of the third private subnet
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet3Id"

  EC2SecurityGroupId:
    Description: The ID of the EC2 Security Group
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-EC2SecurityGroupId"

  NLBSecurityGroupId:
    Description: The ID of the NLB Security Group
    Value: !Ref NLBSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-NLBSecurityGroupId"

  NLBEndpoint:
    Description: The DNS name of the Network Load Balancer
    Value: !GetAtt NetworkLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-NLBEndpoint"

  AutoScalingGroupName:
    Description: The name of the Auto Scaling Group
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-AutoScalingGroupName"